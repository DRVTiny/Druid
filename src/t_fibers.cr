require "redis"
rp=Redis::PooledClient.new
rp.select(8)
svcs = [] of Redis::RedisValue
serviceids = [94762, 94758, 94755, 94751, 10647, 10643, 10654, 10651, 10668, 10672, 10664, 10660, 91529, 91533, 91540, 91536, 9858, 9855, 9847, 9850, 11577, 11580, 11588, 11585, 11602, 11605, 11597, 11594, 11192, 11188, 11196, 11199, 11222, 11226, 11230, 11233, 9921, 9917, 9929, 9925, 9904, 9900, 94931, 94933, 68173, 68175, 94468, 94464, 94473, 94471, 94525, 94527, 94532, 94534, 10225, 10228, 10217, 10221, 10203,10200, 10208, 10212, 9805, 9802, 9794, 9798, 9815, 9811, 9823, 9819, 11037, 11041, 11029, 11033, 11015, 11012, 11023, 11020, 11812, 11808, 11819, 11816, 11541, 11544, 11549, 11553, 11527, 11524, 11536, 11532, 10917, 10914, 10910, 10906, 91513, 91515, 91506, 91508, 71629, 71633, 71636, 71638, 11844, 11848, 11852, 11856, 11130, 11126, 11118, 11121, 11143, 11146, 11135, 11138, 94484, 94480, 94487, 94489, 10589, 10593, 10601, 10597, 10941, 10944, 10949, 10953, 10927, 10924, 10932, 10936, 91968, 91964, 91973, 91971, 10335, 10331, 10323, 10327, 91666, 91664]
ch = Channel(Array(Redis::RedisValue)).new
120.times do |i|
	spawn do
		f_svcs =  [] of Redis::RedisValue
		rp.select(8)
		rp.mget(serviceids).each_with_index do |svc, ind|
			puts "failed to get: #{serviceids[ind]}, class is #{svc.class} instead of string" unless svc.is_a?(String)
			f_svcs << svc
		end
		ch.send(f_svcs)
	end
end

120.times do
	svcs.concat( ch.receive )
end

c = 0
svcs.each do |e|
	c=c+1 unless e.is_a?(String)
end

puts "Failed items: #{c} from #{svcs.size}"

